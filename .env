# =============================================================================
# EXAMPLE ENVIRONMENT VARIABLES
# =============================================================================
# This file contains example/placeholder values and is safe to commit to git.
# Copy this file to .env.local and replace with your actual values.
#
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# =============================================================================
# DATABASE
# =============================================================================
# For local development with Prisma Postgres
# Run: npx prisma dev
# The following URL is similar to the URL produced by running a local Prisma Postgres server
DATABASE_URL="prisma+postgres://localhost:PORT/?api_key=YOUR_API_KEY"

# Alternative: Direct PostgreSQL connection
# DATABASE_URL="postgresql://user:password@localhost:5432/dbname"

# =============================================================================
# AUTHENTICATION
# =============================================================================
# NextAuth Configuration (Legacy - migrating to BetterAuth)
NEXTAUTH_SECRET="your-secret-key-change-this-in-production"
NEXTAUTH_URL="http://localhost:3000"

# BetterAuth Configuration
BETTER_AUTH_SECRET="your-secret-key-change-this-in-production"
BETTER_AUTH_URL="http://localhost:3000"
NEXT_PUBLIC_BETTER_AUTH_URL="http://localhost:3000"

# =============================================================================
# PAYMENT PROCESSING
# =============================================================================
# Stripe Configuration
# Get your keys from: https://dashboard.stripe.com/test/apikeys
STRIPE_SECRET_KEY="sk_test_your_stripe_secret_key_here"
STRIPE_PUBLISHABLE_KEY="pk_test_your_stripe_publishable_key_here"
STRIPE_WEBHOOK_SECRET="whsec_your_webhook_secret_here"

# =============================================================================
# AI SERVICES
# =============================================================================
# OpenAI API Key
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY="sk-proj-your-openai-api-key-here"

# =============================================================================
# AUTUMN SDK
# =============================================================================
# Autumn Secret Key
# Get from: https://useautumn.com
AUTUMN_SECRET_KEY="am_sk_test_your_autumn_secret_key_here"

# =============================================================================
# SUPABASE CONFIGURATION
# =============================================================================
# Get these from: https://app.supabase.com/project/<project-id>/settings/api

# Supabase Project URL
NEXT_PUBLIC_SUPABASE_URL="https://your-project.supabase.co"

# Supabase Anon/Public Key (safe for client-side)
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key-here"

# Supabase Service Role Key (server-side only, has admin access - KEEP SECRET!)
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key-here"

# =============================================================================
# VERCEL KV (for rate limiting in production)
# =============================================================================
# Local dev: Uses in-memory rate limiting (no setup needed)
# Production: Vercel KV is auto-configured when you add it in Vercel dashboard
# Go to: Vercel Dashboard → Storage → Create KV Database
# Environment variables are automatically set:
# - KV_REST_API_URL
# - KV_REST_API_TOKEN
# - KV_REST_API_READ_ONLY_TOKEN
