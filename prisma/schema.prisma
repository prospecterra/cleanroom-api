// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  emailVerified    DateTime?
  password         String?
  name             String?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Legacy fields - will be removed after Autumn migration
  credits          Int       @default(0)
  creditsReserved  Int       @default(0)
  stripeCustomerId String?

  // Relations
  apiKeys          ApiKey[]
  transactions     Transaction[]
  accounts         Account[]
  sessions         Session[]
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TransactionType
  amount    Int
  credits   Int
  description String?
  createdAt DateTime @default(now())

  @@index([userId])
}

enum TransactionType {
  CREDIT_PURCHASE
  API_USAGE
  REFUND
}

// BetterAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
